import Link from "next/link";

const {
  Paragraph,
  CodeString,
  TextBold,
  Note,
} = require("@/app/_components/Text");

export const datafetchingandcaching = [
  <Paragraph key={"routerendering"}>
    A route can be rendered statically or dynamically in next JS. Static routes
    will have their content pregenerated. All the static routes are cached opn
    the server; <TextBold>the full route cache.</TextBold> These routes will
    always be server component because client components by their nature are
    dynamic; client components that make requests fetch requests and send data
    make a route. Dynamic routes will make new fetch requests on each user
    requests. Dynamic routes can include client components only are the mixture
    of server and client components. Client components however do not make
    routes dynamic, all routes are cached by default unless they utilise dynamic
    functions (<CodeString>searchParams, cookies and headers</CodeString> ).
    Dynamic functions may return different values on each request which cannot
    be known prior to that. Other ways of opting out of cahcing include time
    based revalidation, on demand revalidation and configuring a route page or
    layout of route to always request fetch data on each user request.
  </Paragraph>,

  <Paragraph key={"datacaching"}>
    The data returned by <CodeString>fetch</CodeString> API is also cached
    route. Fetch can recieve an option object as the second argument, the
    caching option
    <CodeString>{` { cache: 'force-cache' } `}</CodeString>is passed by
    default.The fetch request can be revalidated to make a route partially
    dynamic,passing <CodeString>{`{ next: { revalidate: 60 } }`}</CodeString>{" "}
    option passed as part the options object will revalidate the fectch after 60
    seconds. The data will be stale for 60 seconds from the last request and
    while there are no new requests the data will be cached until another
    request is made out of the 60 seconds window.{" "}
    <CodeString>{`{ next: { revalidate: 0 } }`}</CodeString> option will stop
    the caching.
  </Paragraph>,

  <Paragraph key={"invalidatingserveractions"}>
    The fetch api data cache can be invalidated on demand in server actions.{" "}
    <CodeString>revalidatePath(&apos;/&apos;)</CodeString> can be invoked in
    server actions imported from
    <CodeString>next/cache</CodeString> which will clear the data cache and by
    nmaking new fetch requests for that route. The will have the same effect.
    Tags set in a fetch api{" "}
    <CodeString>{`fetch(https://..., { next: { tags: ['a', 'b'] } })`}</CodeString>
    are cleared by <CodeString>revalidateTag(&apos;a&apos;)</CodeString> method.
    Invalidating Fetch will also update the data cache by making a new request,
    updating data cache and causing a soft refresh.
  </Paragraph>,

  <Paragraph key={"routeconfig"}>
    A route can also be forced to be dynamic and fetch data when a route is
    requested using a
    <Link
      href={
        "https://nextjs.org/docs/app/api-reference/file-conventions/route-segment-config"
      }
    >
      segment config.
    </Link>
    The configurations are made in the page or layout files. You can opt back
    into dynamically rendering pages for dynamic params not generated by
    generateStaticParams by manually setting dynamicParams = true.
  </Paragraph>,

  <Paragraph key={"routecache"}>
    Next JS implements <CodeString>route cache</CodeString>, caching a requested
    route in the browser and prefetching any <TextBold>Link</TextBold> in the
    requested page component on entering a view port. The cache is persisted for
    30 seconds or until the route is refreshed.{" "}
    <CodeString>prefetch={`{null}`}</CodeString> is the default value,
    prefetches routes every 30 secondds, static routes are fetched fully and
    with dynamic routes, the prefetching ends at the{" "}
    <CodeString>loading.js</CodeString> file if the route includes a shared{" "}
    <CodeString>layout.js</CodeString> file. With prefecthing set to false,
    prefetching is not done. Set to true prefectches both dynamic and static
    route. Prefetching enables instant navigation and partial prerendering when
    using a shared layout, stoping full page reloads, mimicing SPA behaviour.
    When a client component is used in the layout its state will also be
    <Link href={"https://app-router.vercel.app/layouts/clothing/shoes"}>
      preserved.
    </Link>
  </Paragraph>,

  <Note key={"servercomponent!==spa"}>
    Server components cannot completely the interactive client componets, server
    componenets need to communcatte withe the server and get new data and render
    new content when the data cache is invalidated or server actions invalidate
    the cache
  </Note>,
  // Set to true prefecthes after every 5 minutes. TODO,  is the claim no prefetching whenb its set to false true.- // prefectch link code , anchor tag and router. push

  <Paragraph key={"requestcache"}>
    React memoizes indentical fetch requests while rendering a route, similar
    fetch requests in a server component tree being are requested only once.
    Replicating indentical fetch request in a component tree will have the same
    effect of passing down props without causing duplicate requests. All the
    server components in the relevant route requested including
    generateStaticParams and generateMetadata are able to share data reducing
    the rendering time. The cache is maintain in the server and it is discarded
    when the render process is complete after each request. The{" "}
    <CodeString>AbortController</CodeString> Api and{" "}
    <CodeString>defferedValue</CodeString> optimize the amount of fetch requests
    made when typing to reduce the amount of fetch requests that go through to
    the server causing new renders.
  </Paragraph>,
  //react fetch mnemoization= TODO
];

// However, there are exceptions, fetch requests are not cached when:Used inside a Server Action.Used inside a Route Handler that uses the POST method.

// no revalidation if u use post requests on a route handler.

// Any fetches done inside of your middleware will be uncached by default.

// prefectch link code , anchor tag and router. push
